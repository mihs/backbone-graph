// Generated by CoffeeScript 1.6.2
(function() {
  var Graph, GraphCollection, GraphModel, addOptions, getValue, modelOptions, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getValue = function(key, context) {
    if (!key) {
      return null;
    }
    if (_.isFunction(key)) {
      return key.call(context);
    }
    return key;
  };

  modelOptions = function(options) {
    return options && _.omit(options, "add", "remove", "url", "urlRoot", "collection");
  };

  addOptions = function(options) {
    return options && _.extend(_.omit(options, "url", "urlRoot", "collection"), {
      remove: false,
      parse: false
    });
  };

  Backbone.Graph = Graph = (function() {
    function Graph() {
      var _this = this;

      this.collections = [];
      this.models = new GraphCollection();
      this.models.model = GraphModel;
      this.models.on("remove", function(model) {
        var col, rel, _i, _len, _ref;

        model._relChanging = true;
        _ref = model.relations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rel = _ref[_i];
          col = model.attributes[rel.key];
          if (col instanceof Backbone.Collection) {
            col.reset();
            col.off(null, null, _this);
          }
        }
        return model._relChanging = false;
      }, this);
      this.models.on("add", function(model, col, options) {
        return _this.getCollection(model.constructor, true).add(model, options);
      }, this);
    }

    Graph.prototype.getCollection = function(type, create) {
      var col,
        _this = this;

      if (type === GraphModel || type.prototype instanceof GraphModel) {
        col = _.chain(this.collections).filter(function(c) {
          return c.model === type;
        }).first().value();
        if (!col && create) {
          col = new Backbone.Collection();
          col.model = type;
          this.collections.push(col);
          col.on("remove", function(model) {
            return _this.removeModel(model);
          }, this);
        }
        return col;
      }
      return null;
    };

    Graph.prototype.addModel = function(model, options) {
      if (options == null) {
        options = {};
      }
      model._store = this;
      return this.models.add(model, addOptions(options));
    };

    Graph.prototype.removeModel = function(model) {
      return this.models.remove(model);
    };

    return Graph;

  })();

  Backbone.GraphModel = GraphModel = (function(_super) {
    __extends(GraphModel, _super);

    GraphModel.prototype._getRelationType = function(relation) {
      if (!relation.type) {
        return null;
      }
      if (relation.type.ctor) {
        return relation.type.ctor;
      }
      if (relation.type.provider) {
        return relation.type.provider.call(this);
      }
      return null;
    };

    GraphModel.prototype._onModelEvent = function(attr, parent) {
      return function(event, model) {
        var args, attrs;

        if (event.indexOf("change:") === 0) {
          attrs = event.substring(7);
          event = "change:" + attr + "." + attrs;
          args = [event].concat(_.toArray(arguments).slice(1));
          return parent.trigger.apply(parent, args);
        }
      };
    };

    GraphModel.prototype._changeRel = function(model, attr, value, options) {
      var attrs, currentReverseKey, id, modelInStore, prevModel, prevReverseKey, rel, relModel, relType;

      rel = this._findRelation(model, attr);
      prevReverseKey = getValue(rel.reverseKey, new Backbone.Model(model.previousAttributes()));
      prevModel = model.previous(attr);
      if (prevModel instanceof GraphModel && prevReverseKey) {
        if (prevModel._relChanging || prevModel._changing) {
          return;
        }
        if (prevModel.get(prevReverseKey) instanceof Backbone.Collection) {
          prevModel.get(prevReverseKey).remove(model, options);
        } else {
          prevModel.set(prevReverseKey, null, options);
        }
        prevModel.off("all", null, this);
      }
      relModel = value;
      if (!relModel) {
        return;
      }
      if (relModel instanceof GraphModel) {
        if (relModel._relChanging || relModel._changing) {
          return;
        }
      } else {
        if (_.isString(relModel)) {
          id = relModel;
          relModel = {};
          relModel[Backbone.Model.prototype.idAttribute] = id;
        } else {
          id = relModel != null ? relModel[Backbone.Model.prototype.idAttribute] : void 0;
        }
        modelInStore = Backbone.graphStore.models.get(id);
        if (modelInStore) {
          if (options.merge) {
            modelInStore.set(relModel, options);
          }
          relModel = modelInStore;
        } else {
          if (rel.autoCreate) {
            relType = this._getRelationType(rel);
            if (!relType) {
              return;
            }
            attrs = relModel;
            relModel = new relType(attrs, modelOptions(options));
          } else {
            return;
          }
        }
      }
      this.attributes[attr] = relModel;
      currentReverseKey = getValue(rel.reverseKey, model);
      if (currentReverseKey) {
        if (relModel.get(currentReverseKey) instanceof Backbone.Collection) {
          relModel.get(currentReverseKey).add(model, addOptions(options));
        } else {
          relModel.set(currentReverseKey, model, modelOptions(options));
        }
      }
      return relModel.on("all", this._onModelEvent(attr, this), this);
    };

    GraphModel.prototype._addToColRel = function(relModel, col, options) {
      var rel;

      rel = this._findRelation(relModel, getValue(col.reverseKey, this));
      if (rel) {
        if (relModel.get(rel.key) instanceof Backbone.Collection) {
          return relModel.get(rel.key).add(this, addOptions(options));
        } else {
          return relModel.set(rel.key, this, modelOptions(options));
        }
      }
    };

    GraphModel.prototype._removeFromColRel = function(relModel, col, options) {
      var rel;

      rel = this._findRelation(relModel, getValue(col.reverseKey, this));
      if (rel) {
        if (relModel.get(rel.key) instanceof Backbone.Collection) {
          return relModel.get(rel.key).remove(this, options);
        } else {
          return relModel.set(rel.key, null, modelOptions(options));
        }
      }
    };

    GraphModel.prototype._findRelation = function(model, key) {
      if (_.isArray(model.relations)) {
        return _(model.relations || []).find(function(r) {
          return r.key === key;
        });
      } else {
        return model.relations[key];
      }
    };

    GraphModel.prototype._setupCollectionAttributes = function() {
      var _this = this;

      _.each(this.relations || [], function(rel) {
        var attrs, col, relType;

        relType = _this._getRelationType(rel);
        if ((relType != null ? relType.prototype : void 0) instanceof Backbone.Collection) {
          if (!(_this.attributes[rel.key] instanceof Backbone.Collection)) {
            attrs = _this.attributes[rel.key];
            if (!(attrs && _.size(attrs) > 0)) {
              attrs = null;
            }
            col = new relType(attrs);
            col.key = rel.key;
            col.reverseKey = rel.reverseKey;
            col.container = _this;
            col.on("rel_add add", _this._addToColRel, _this);
            col.on("rel_remove remove", _this._removeFromColRel, _this);
            return _this.attributes[rel.key] = col;
          }
        } else {
          return (function(rel) {
            return _this.on("rel_change:" + rel.key + " change:" + rel.key, function(model, value, opts) {
              return _this._changeRel(model, rel.key, value, opts);
            }, _this);
          })(rel);
        }
      });
      return this._relAttrsSetup = true;
    };

    function GraphModel(attributes, options) {
      if (options == null) {
        options = {};
      }
      if (!this.relations) {
        this.relations = [];
      }
      GraphModel.__super__.constructor.call(this, attributes, options);
    }

    GraphModel.prototype.initialize = function(attributes, options) {
      GraphModel.__super__.initialize.apply(this, arguments);
      if (!this._relAttrsSetup) {
        this._setupCollectionAttributes();
      }
      if (!this._store) {
        Backbone.graphStore.addModel(this, options);
      }
      return this.trigger('"initialize', this);
    };

    GraphModel.prototype.toJSON = function(options) {
      var attr, json, rel, _ref, _ref1, _ref2;

      json = {};
      _ref = this.attributes;
      for (attr in _ref) {
        if (!__hasProp.call(_ref, attr)) continue;
        rel = this._findRelation(this, attr);
        if (rel) {
          if (((_ref1 = this.attributes[attr]) != null ? _ref1.id : void 0) && rel.serialize) {
            json[attr] = (_ref2 = this.attributes[attr]) != null ? _ref2.id : void 0;
          }
        } else {
          json[attr] = this.attributes[attr];
        }
      }
      return json;
    };

    GraphModel.prototype.prepareSetParams = function(key, value, options) {
      var attrs;

      if (_.isObject(key) || key === null) {
        attrs = key;
        options = value;
      } else {
        attrs = {};
        attrs[key] = value;
      }
      return [attrs, options];
    };

    GraphModel.prototype.set = function(key, value, options) {
      var attrs, current, rel, toSet, _i, _len, _ref, _ref1, _ref2;

      if (!this._relAttrsSetup) {
        this._setupCollectionAttributes();
      }
      _ref = this.prepareSetParams(key, value, options), attrs = _ref[0], options = _ref[1];
      if (!attrs) {
        return this;
      }
      if (attrs === this.attributes) {
        return this;
      }
      _ref1 = this.relations;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        rel = _ref1[_i];
        if (rel.key in attrs) {
          if (((_ref2 = this._getRelationType(rel)) != null ? _ref2.prototype : void 0) instanceof Backbone.Collection) {
            delete attrs[rel.key];
          }
          current = this.attributes[rel.key];
          toSet = attrs[rel.key];
          if (current && toSet) {
            if (rel.ignoreId || (current.id && current.id === ((value != null ? value[Backbone.Model.prototype.idAttribute] : void 0) || value))) {
              attrs[rel.key] = current;
              if (options.merge && _.isObject(value)) {
                current.set(value, modelOptions(options));
              }
            }
          }
        }
      }
      return GraphModel.__super__.set.call(this, attrs, options);
    };

    return GraphModel;

  })(Backbone.Model);

  Backbone.GraphCollection = GraphCollection = (function(_super) {
    __extends(GraphCollection, _super);

    function GraphCollection() {
      _ref = GraphCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GraphCollection.prototype.reset = function(models, options) {
      var model, modelIn, result, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _ref4;

      if (options != null ? options.silent : void 0) {
        return GraphCollection.__super__.reset.apply(this, arguments);
      }
      if ((_ref1 = this.container) != null) {
        _ref1._relChanging = true;
      }
      _ref2 = this.models;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        modelIn = _ref2[_i];
        this.trigger("rel_remove", modelIn, this, options);
      }
      result = GraphCollection.__super__.reset.apply(this, arguments);
      _ref3 = this.models;
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        model = _ref3[_j];
        this.trigger("rel_add", model, this, options);
      }
      if ((_ref4 = this.container) != null) {
        _ref4._relChanging = false;
      }
      return result;
    };

    GraphCollection.prototype._prepareModel = function(attrs, options) {
      var id, model;

      if (attrs instanceof GraphModel) {
        return GraphCollection.__super__._prepareModel.apply(this, arguments);
      }
      if ((id = attrs[Backbone.Model.prototype.idAttribute]) && (model = Backbone.graphStore.models.get(id))) {
        if (options.merge) {
          if (options.parse) {
            attrs = model.parse(attrs);
          }
          model.set(attrs, options);
        }
        return model;
      }
      return GraphCollection.__super__._prepareModel.apply(this, arguments);
    };

    return GraphCollection;

  })(Backbone.Collection);

  Backbone.graphStore = new Graph();

}).call(this);
